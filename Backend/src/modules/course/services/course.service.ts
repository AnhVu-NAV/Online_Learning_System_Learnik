import mongoose from 'mongoose';
import Course, { ICourse } from '../models/course.model';
import { CustomError } from '../../../utils/custom-error';

// T·∫°o kh√≥a h·ªçc
export async function createCourse(courseData: Partial<ICourse>) {
  try {
    if (courseData.instructorId && !mongoose.Types.ObjectId.isValid(courseData.instructorId.toString())) {
      throw new CustomError('Instructor ID kh√¥ng h·ª£p l·ªá', 400);
    }

    const newCourse = await Course.create(courseData);
    return newCourse;
  } catch (error) {
    console.error("üö® L·ªói khi t·∫°o kh√≥a h·ªçc:", error);
    throw new CustomError('L·ªói khi t·∫°o kh√≥a h·ªçc', 500);
  }
}

// L·∫•y danh s√°ch kh√≥a h·ªçc
export async function getAllCourses() {
  try {
    const courses = await Course.find()
      .populate('instructorId', 'name email') // Ch·ªâ l·∫•y name, email ƒë·ªÉ tr√°nh d·ªØ li·ªáu th·ª´a
      .populate('lessons', 'title duration') 
      .populate('reviews', 'rating comment')
      .populate('users', 'name email');
    
    return courses;
  } catch (error) {
    console.error("üö® L·ªói khi l·∫•y danh s√°ch kh√≥a h·ªçc:", error);
    throw new CustomError('L·ªói khi l·∫•y danh s√°ch kh√≥a h·ªçc', 500);
  }
}

// L·∫•y th√¥ng tin kh√≥a h·ªçc theo ID
export async function getCourseById(id: string) {
  try {
    if (!mongoose.Types.ObjectId.isValid(id)) {
      throw new CustomError('ID kh√≥a h·ªçc kh√¥ng h·ª£p l·ªá', 400);
    }

    const course = await Course.findById(id)
      .populate('instructorId', 'name email') 
      .populate('lessons', 'title duration') 
      .populate('reviews', 'rating comment')
      .populate('users', 'name email');

    if (!course) throw new CustomError('Kh√¥ng t√¨m th·∫•y kh√≥a h·ªçc', 404);
    
    return course;
  } catch (error) {
    console.error("üö® L·ªói khi l·∫•y kh√≥a h·ªçc:", error);
    throw new CustomError('L·ªói khi l·∫•y kh√≥a h·ªçc', 500);
  }
}

// C·∫≠p nh·∫≠t kh√≥a h·ªçc
export async function updateCourse(id: string, updateData: Partial<ICourse>) {
  try {
    if (!mongoose.Types.ObjectId.isValid(id)) {
      throw new CustomError('ID kh√≥a h·ªçc kh√¥ng h·ª£p l·ªá', 400);
    }

    if (updateData.instructorId && !mongoose.Types.ObjectId.isValid(updateData.instructorId.toString())) {
      throw new CustomError('Instructor ID kh√¥ng h·ª£p l·ªá', 400);
    }

    const updatedCourse = await Course.findByIdAndUpdate(
      id,
      updateData,
      { new: true }
    );

    if (!updatedCourse) throw new CustomError('Kh√¥ng t√¨m th·∫•y kh√≥a h·ªçc', 404);
    
    return updatedCourse;
  } catch (error) {
    console.error("üö® L·ªói khi c·∫≠p nh·∫≠t kh√≥a h·ªçc:", error);
    throw new CustomError('L·ªói khi c·∫≠p nh·∫≠t kh√≥a h·ªçc', 500);
  }
}

// X√≥a kh√≥a h·ªçc
export async function deleteCourse(id: string) {
  try {
    if (!mongoose.Types.ObjectId.isValid(id)) {
      throw new CustomError('ID kh√≥a h·ªçc kh√¥ng h·ª£p l·ªá', 400);
    }

    const deletedCourse = await Course.findByIdAndDelete(id);
    if (!deletedCourse) throw new CustomError('Kh√¥ng t√¨m th·∫•y kh√≥a h·ªçc', 404);
    
    return deletedCourse;
  } catch (error) {
    console.error("üö® L·ªói khi x√≥a kh√≥a h·ªçc:", error);
    throw new CustomError('L·ªói khi x√≥a kh√≥a h·ªçc', 500);
  }
}
